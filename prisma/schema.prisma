generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_SQLITE")
}

model article_tags {
  article_uuid String
  tag_id       Int
  tags         tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([article_uuid, tag_id])
}

model article_views {
  id         Int       @id @default(autoincrement())
  article_id Int
  ip_address String?
  user_agent String?
  team_id    Int
  view_count Int       @default(0)
  created_at DateTime?
  updated_at DateTime?
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model articles {
  id            Int             @id @default(autoincrement())
  uuid          String
  title         String
  slug          String          @unique(map: "articles_slug_unique")
  content       String
  description   String
  user_id       Int
  category_id   Int?
  team_id       Int?
  image         String
  status        String          @default("draft")
  published_at  DateTime?
  created_at    DateTime?
  updated_at    DateTime?
  article_views article_views[]
  teams         teams?          @relation(fields: [team_id], references: [id], onUpdate: NoAction)
  categories    categories?     @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  media         media[]
}

model cache {
  key        String @id
  value      String
  expiration Int
}

model cache_locks {
  key        String @id
  owner      String
  expiration Int
}

model categories {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique(map: "categories_slug_unique")
  created_at DateTime?
  updated_at DateTime?
  articles   articles[]
}

model failed_jobs {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now())
}

model job_batches {
  id             String  @id
  name           String
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           Int    @id @default(autoincrement())
  queue        String
  payload      String
  attempts     Int
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model media {
  id         Int       @id @default(autoincrement())
  article_id Int
  file_path  String
  media_type String
  created_at DateTime?
  updated_at DateTime?
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int
}

model model_has_permissions {
  permission_id Int
  model_type    String
  model_id      Int
  team_id       Int
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([team_id, permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
  @@index([team_id], map: "model_has_permissions_team_foreign_key_index")
}

model model_has_roles {
  role_id    Int
  model_type String
  model_id   Int
  team_id    Int
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([team_id, role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
  @@index([team_id], map: "model_has_roles_team_foreign_key_index")
}

model password_reset_tokens {
  email      String    @id
  token      String
  created_at DateTime?
}

model permissions {
  id                    Int                     @id @default(autoincrement())
  name                  String
  guard_name            String
  created_at            DateTime?
  updated_at            DateTime?
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model role_has_permissions {
  permission_id Int
  role_id       Int
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([permission_id, role_id])
}

model roles {
  id                   Int                    @id @default(autoincrement())
  team_id              Int?
  name                 String
  guard_name           String
  created_at           DateTime?
  updated_at           DateTime?
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([team_id, name, guard_name], map: "roles_team_id_name_guard_name_unique")
  @@index([team_id], map: "roles_team_foreign_key_index")
}

model sessions {
  id            String  @id
  user_id       Int?
  ip_address    String?
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model tags {
  id           Int            @id @default(autoincrement())
  name         String
  slug         String         @unique(map: "tags_slug_unique")
  created_at   DateTime?
  updated_at   DateTime?
  article_tags article_tags[]
}

model users {
  id                Int               @id @default(autoincrement())
  name              String
  email             String            @unique(map: "users_email_unique")
  email_verified_at DateTime?
  password          String
  team_id           Int?
  remember_token    String?
  created_at        DateTime?
  updated_at        DateTime?
  articles          articles[]
  kua_user          kua_user[]
  laporan_kinerja   laporan_kinerja[]
  team_user         team_user[]
  teams             teams?            @relation(fields: [team_id], references: [id], onUpdate: NoAction)
}

model user_accounts {
  uuid              String    @id @default(uuid())
  name              String
  email             String    @unique(map: "user_accounts_email_unique")
  email_verified_at DateTime?
  phone             String?
  nik               String?   @unique(map: "user_accounts_nik_unique")
  password          String
  avatar            String?
  remember_token    String?
  created_at        DateTime?
  updated_at        DateTime?
  otps              otps[]
}

model otps {
  id            Int           @id @default(autoincrement())
  user_id       String
  otp           String
  expires_at    DateTime
  is_used       Boolean       @default(false)
  created_at    DateTime?
  updated_at    DateTime?
  user_accounts user_accounts @relation(fields: [user_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction)
}

model BannerApp {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  image_path  String
  link        String?
  is_active   Boolean   @default(true)
  start_at    DateTime?
  end_at      DateTime?
  created_at  DateTime?
  updated_at  DateTime?
}

model team_user {
  id         Int       @id @default(autoincrement())
  team_id    Int
  user_id    Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teams {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String
  created_at    DateTime?
  updated_at    DateTime?
  article_views article_views[]
  articles      articles[]
  employees     employees[]
  team_user     team_user[]
  users         users[]
}

model employees {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique(map: "employees_email_unique")
  team_id           Int?
  phone             String?
  nik               String             @unique(map: "employees_nik_unique")
  is_kepala         Boolean            @default(false)
  is_active         Boolean            @default(true)
  status            String
  grade             String?
  position          String?
  nip               String?            @unique(map: "employees_nip_unique")
  id_kua            Int?
  date_of_birth     String
  date_of_joining   String
  gender            String?
  avatar            String?
  address           String?
  file              String?
  created_at        DateTime?
  updated_at        DateTime?
  profile_companies profile_companies? @relation(fields: [id_kua], references: [id_kua])
  teams             teams?             @relation(fields: [team_id], references: [id], onUpdate: NoAction)
  kua_user          kua_user[]
}

model kua_user {
  id                Int                @id @default(autoincrement())
  id_kua            Int?
  id_employee       Int?
  user_id           Int
  created_at        DateTime?
  updated_at        DateTime?
  users             users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employees         employees?         @relation(fields: [id_employee], references: [id], onUpdate: NoAction)
  profile_companies profile_companies? @relation(fields: [id_kua], references: [id_kua])
}

model laporan_kinerja {
  id                  Int               @id @default(autoincrement())
  user_id             Int
  id_kua              Int
  kegiatan            String
  deskripsi_pekerjaan String
  tanggal             DateTime
  created_at          DateTime?
  updated_at          DateTime?
  profile_companies   profile_companies @relation(fields: [id_kua], references: [id_kua], onDelete: Cascade)
  users               users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profile_companies {
  id              Int               @id @default(autoincrement())
  name            String
  id_kua          Int               @unique(map: "profile_companies_id_kua_unique")
  address         String
  coordinates     String
  id_kecamatan    Int
  id_kabupaten    Int
  id_provinsi     Int
  contact         String
  facebook        String?
  email           String
  instagram       String?
  youtube         String?
  tiktok          String?
  foto            String
  created_at      DateTime?
  updated_at      DateTime?
  employees       employees[]
  kua_user        kua_user[]
  laporan_kinerja laporan_kinerja[]
}
